// --------------------------------
// Typography

// --------------------------------

// edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
    $margin: calc((#{$capital-letter} - #{$line-height}) * 0.5em);

    &::before {
        content: "";
        display: block;
        height: 0;
        width: 0;
        margin-top: $margin;
    }

    &::after {
        content: "";
        display: block;
        height: 0;
        width: 0;
        margin-bottom: $margin;
    }
}

@mixin g-text-preset($step) {
    @include properties(map-get($goose--text, $step));
}

// --------------------------------

// Spacing

// --------------------------------

// edit space unit on a component level
@mixin spaceUnit($space-unit) {
    --space-unit: #{$space-unit};
}

// --------------------------------

// Reset

// --------------------------------

// reset user agent style
@mixin reset {
    background-color: transparent;
    padding: 0;
    border: 0;
    border-radius: 0;
    color: inherit;
    line-height: inherit;
    appearance: none;
}

// --------------------------------

// Colors

// --------------------------------

// define HSL color variable
@mixin defineColourHSL($colour, $hue, $saturation, $lightness) {
    #{$colour}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
    #{$colour}-h: #{$hue};
    #{$colour}-s: #{$saturation};
    #{$colour}-l: #{$lightness};
}

// return color with different opacity value
@function alpha($colour, $opacity) {
    $colour: str-replace($colour, "var(");
    $colour: str-replace($colour, ")");
    $colour-h: var(#{$colour + "-h"});
    $colour-s: var(#{$colour + "-s"});
    $colour-l: var(#{$colour + "-l"});
    // @debug #{$colour-h};
    @return hsla($colour-h, $colour-s, $colour-l, $opacity);
}

// return color with different lightness value
@function lightness($color, $lightnessMultiplier) {
    $color: str-replace($color, "var(");
    $color: str-replace($color, ")");
    $color-h: var(#{$color + "-h"});
    $color-s: var(#{$color + "-s"});
    $color-l: var(#{$color + "-l"});
    @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// modify color HSLA values
@function adjustHSLA($color, $hueMultiplier: 1, $saturationMultiplier: 1, $lightnessMultiplier: 1, $opacity: 1) {
    $color: str-replace($color, "var(");
    $color: str-replace($color, ")");
    $color-h: var(#{$color + "-h"});
    $color-s: var(#{$color + "-s"});
    $color-l: var(#{$color + "-l"});
    @return hsla(calc(#{$color-h} * #{$hueMultiplier}), calc(#{$color-s} * #{$saturationMultiplier}), calc(#{$color-l} * #{$lightnessMultiplier}), $opacity);
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// --------------------------------

// Accessibility

// --------------------------------

// hide - content made available only to screen readers
@mixin srHide {
    position: absolute;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
}

// show
@mixin srShow {
    position: static;
    clip: auto;
    clip-path: none;
}

// --------------------------------

// CSS Triangle

// --------------------------------

@mixin triangle($direction: up, $width: 12px, $color: red) {
    width: 0;
    height: 0;
    border: $width solid transparent;

    @if ($direction ==left) {
        border-right-color: $color;
    } @else if($direction ==right) {
        border-left-color: $color;
    } @else if($direction ==down) {
        border-top-color: $color;
    } @else {
        border-bottom-color: $color;
    }
}

// --------------------------------

// Helpers

// --------------------------------

@mixin properties($map) {
    @each $name, $value in $map {
        #{$name}: $value;
    }
}

// --------------------------------

// Position

// --------------------------------

@mixin vertical-align {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}

@mixin center-placed {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// --------------------------------

// Additional breakpoint

// --------------------------------

$xsmall: 375;
$small: 750;
$medium: 1024;
$large: 1280;

@mixin bp($min, $max) {
    @media (min-width: $min+px) and (max-width: ($max - 1)+px) {
        @content;
    }
}

@mixin bpmin($min) {
    @media (min-width: $min+px) {
        @content;
    }
}

@mixin bpmax($max) {
    @media (max-width: ($max - 1)+px) {
        @content;
    }
}

@mixin toRem($property, $value) {
    #{$property}: ($value / $fontSize-base) + rem;
}
